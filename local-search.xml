<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>GitHub和Git笔记</title>
    <link href="/2023/08/15/git-notes/"/>
    <url>/2023/08/15/git-notes/</url>
    
    <content type="html"><![CDATA[<p>本文主要记录一些GitHub和Git的使用笔记。</p><h2 id="github-markdown-语法">GitHub Markdown 语法</h2><p>GitHub基于CommonMark规范拓展了markdown，称为GitHub Flavored Markdown(GFM)，目前在GitHub.com和GitHubEnterprise上支持用户内容的格式。包括<code>README</code>文件，<code>issues</code>和<code>wiki</code>均支持GFM语法。</p><h3 id="代码diff">代码diff</h3><p>GFM中可以使用<code>diff</code>来显示代码的变更，具体用法为：<br />```diff<br />+ This is new code<br />- This is deleted code<br />```</p><p>展示效果为： <figure class="highlight diff"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs diff"><span class="hljs-addition">+ This is new code</span><br><span class="hljs-deletion">- This is deleted code</span><br></code></pre></td></tr></table></figure></p><h3 id="创建noteimportant和warning">创建Note、Important和Warning</h3><p>GFM中可以用一下代码创建Note、Important和Warning框：<br /><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">[!<span class="hljs-variable constant_">NOTE</span>]  </span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-title class_">Highlights</span> information that users should take into account, even when skimming.  </span><br><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">[!<span class="hljs-variable constant_">IMPORTANT</span>]  </span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-title class_">Crucial</span> information necessary <span class="hljs-keyword">for</span> users to succeed.  </span><br><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">[!<span class="hljs-variable constant_">WARNING</span>]  </span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-title class_">Critical</span> content demanding immediate user attention due to potential risks.  </span><br></code></pre></td></tr></table></figure></p><p>展示效果为：</p><p><imgsrc="https://pic.imgdb.cn/item/64f3ea14661c6c8e54f8b292.jpg" /><br />更具体信息可以参考<ahref="https://github.com/orgs/community/discussions/16925">这里</a>。</p><h3 id="引用议题和拉取请求">引用议题和拉取请求</h3><p>在GitHub的<code>issues</code>里经常需要引用以前的议题，可以通过键入<code>#</code> 在存储库中调出建议的议题和拉取请求的列表。键入议题或拉取请求的编号或标题以过滤列表，然后按 Tab 或 Enter键以填写选中的结果。 <imgsrc="https://pic.imgdb.cn/item/64db77f5661c6c8e54826f4b.jpg" /></p><h3 id="引用具体某行代码">引用具体某行代码</h3><p>在GitHub的<code>issues</code>讨论中经场需要引用repo中的某段代码，可以参照以下方法：</p><ol type="1"><li><p>找到要链接的代码：</p><ul><li>要链接到文件中的代码，请导航到该文件。</li><li>要链接到拉取请求中的代码，请导航到该拉取请求并单击 “已更改文件”。然后浏览到含有要包含在注释中的代码的文件，并单击“查看”。</li></ul></li><li><p>决定是选择一行还是一个范围。</p><ul><li>要选择单行代码，请单击行号以高亮显示该行。</li><li>要选择代码范围，请单击范围内第一行的行号以高亮显示代码行。然后，将鼠标停在代码范围的最后一行，按Shift，再单击行号以突出显示范围。</li></ul></li><li><p>在行或一系列行的左侧，单击 。 在下拉菜单中，单击“复制永久链接”。<imgsrc="https://docs.github.com/assets/cb-40281/mw-1440/images/help/repository/open-new-issue-specific-line.webp" /></p></li><li><p>导航到要链接到代码段的地方，粘贴即可。注意此类永久链接仅在其起源仓库中呈现为代码段。在其他仓库中，永久链接代码段将呈现为 URL。</p></li></ol><p>具体信息可查看<ahref="https://docs.github.com/zh/get-started/writing-on-github/working-with-advanced-formatting/creating-a-permanent-link-to-a-code-snippet">这里</a>.</p><hr /><p>更多的GFM使用方法可参考<ahref="https://docs.github.com/zh/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax">这里</a>和<ahref="https://github.github.com/gfm/">这里</a>。</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LaTeX笔记[WIP]</title>
    <link href="/2023/08/03/latex-notes/"/>
    <url>/2023/08/03/latex-notes/</url>
    
    <content type="html"><![CDATA[<h2 id="latex基础">1. LaTeX基础</h2><p>[WIP]</p><h2 id="高效工具">2. 高效工具</h2><ul><li>强烈推荐<a href="https://accounts.mathpix.com/">MathpixSnip</a>这个工具，可以实现公式截图转LaTeX，效果超级好，公式准确无误！唯一的缺点是每个账户只可以免费转10次图片，不过截图的时候可以尽量把公式截在一张图上，然后可以一次性转成LaTeX，并且只算一次转换。</li></ul><h2 id="公式杂记">3. 公式杂记</h2><p><span class="math display">\[E=mc^2\]</span></p><p><span class="math display">\[\begin{eqnarray}\nabla\cdot\vec{E} &amp;=&amp; \frac{\rho}{\epsilon_0} \\\nabla\cdot\vec{B} &amp;=&amp; 0 \\\nabla\times\vec{E} &amp;=&amp; -\frac{\partial B}{\partial t} \\\nabla\times\vec{B} &amp;=&amp;\mu_0\left(\vec{J}+\epsilon_0\frac{\partial E}{\partial t} \right)\end{eqnarray}\]</span></p><p><span class="math display">\[\Psi\left(\mathbf{r}_1, \ldots, \mathbf{r}_N\right)=\prod_{i=1}^N\psi_i\left(\mathbf{r}_i\right)\]</span></p><p><span class="math display">\[\hat{H} \Psi=[\hat{T}+\hat{V}+\hat{U}]\Psi=\left[\sum_{i=1}^N\left(-\frac{\hbar^2}{2 m_i}\nabla_i^2\right)+\sum_{i=1}^NV\left(\mathbf{r}_i\right)+\sum_{i&lt;j}^N U\left(\mathbf{r}_i,\mathbf{r}_j\right)\right] \Psi=E \Psi\]</span></p><p><span class="math display">\[\Psi\left(\mathbf{r}_1, \ldots, \mathbf{r}_N\right)=\prod_{i=1}^N\psi_i\left(\mathbf{r}_i\right)\]</span></p><p><span class="math display">\[n(\mathbf{r})=N \int \mathrm{d}^3 \mathbf{r}_2 \cdots \int \mathrm{d}^3\mathbf{r}_N \Psi^*\left(\mathbf{r}, \mathbf{r}_2, \ldots,\mathbf{r}_N\right) \Psi\left(\mathbf{r}, \mathbf{r}_2, \ldots,\mathbf{r}_N\right)\]</span></p><p><span class="math display">\[E[\rho]=T_e[\rho]+U_{e x t}[\rho]+U_{e e}[\rho]\]</span></p><p><span class="math display">\[E[\rho]=T_0[\rho]+U_{e x t}[\rho]+E_{c l}[\rho]+E_{x c}[\rho]\]</span></p><p><span class="math display">\[{\left[-\frac{1}{2} \nabla^2+{V}_{e f f}(\mathbf{r})\right]\phi_i(r)=\sum_j \varepsilon_{i, j} \phi_j(r)}\]</span></p><p><span class="math display">\[E[n]=T[n]+U[n]+\int V(\mathbf{r}) n(\mathbf{r}) \mathrm{d}^3 \mathbf{r}\]</span></p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
      <tag>LaTeX</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python脚本批量进行VASP吸附结构频率计算</title>
    <link href="/2022/03/01/python-script-for-VASP-frequency-batch-calculation/"/>
    <url>/2022/03/01/python-script-for-VASP-frequency-batch-calculation/</url>
    
    <content type="html"><![CDATA[<h2 id="前言introduction">前言（Introduction）</h2><p>在用VASP做催化反应机理分析时，自由能变化是最为重要的分析内容之一。通常需要进行频率计算来进行自由能校正<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="校正分子和吸附分子自由能. Jincheng Liu.http://blog.wangruixing.cn/2019/04/21/freenergy/">[1]</span></a></sup>。我们常计算的体系一般是<strong>某个(系列)结构吸附一些小的分子或者中间产物</strong>，这样的情况下频率计算需要以下几个步骤：</p><ul><li>复制<code>CONTCAR</code>为<code>POSCAR</code></li><li><strong>修改POSCAR，fix吸附基底，relax表面吸附的分子</strong></li><li>修改<code>INCAR</code>参数<ul><li><code>IBRION = 5</code></li><li><code>NFREE = 2</code></li><li><code>POTIM = 0.015</code></li><li><code>EDIFF = 1E-7</code></li></ul></li><li>run</li></ul><p>虽然步骤简单，但是当要进行一系列结构吸附某个中间产物的频率计算时，手动操作比较麻烦(特别是修改<code>POSCAR</code>进行固定的时候)，所以尝试用python脚本批量实现上述步骤，减少工作量。</p><h2 id="方案-solution">方案 (Solution)</h2><h3 id="前置准备">1. 前置准备</h3><p><code>vaspkit 1.2.5 ~ 1.3.1</code> (<strong><em>update</em></strong>:vaspkit 1.3.5版402功能不支持fix no atom）<br /><code>python 3.8.0</code></p><h3 id="代码思路">2. 代码思路</h3><h4 id="step-1">step 1</h4><p>脚本的最关键在于实现自动修改<code>POSCAR</code>使得吸附基底fix，而吸附的分子或者中间体是relax。考虑到大部分情况下，我们需要relax的原子往往都是在最顶部的(也就是<code>POSCAR</code>中z值最大的那几个原子)，所以我们可以先fix<code>POSCAR</code>中所有原子(<code>vaspkit</code><code>402</code>功能-&gt; <code>1</code> -&gt; <code>2</code> -&gt;<code>0 0</code> -&gt;<code>2</code>)，然后根据吸附分子/中间产物的个数<em>n</em>，relax<code>POSCAR</code>中最顶部的<em>n</em>个原子。比如吸附的小分子是CO<sub>2</sub>，那我们输入3，就可以relax最顶部的3个原子。具体代码如下：<figure class="highlight scss"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><pre><code class="hljs scss">def <span class="hljs-built_in">relax_top_atoms</span>(num):<br>    os.<span class="hljs-built_in">popen</span>(<br>        <span class="hljs-string">&quot;(echo 402; echo 1; echo 2; echo 0 0; echo 2;)|vaspkit&quot;</span>).<span class="hljs-built_in">readlines</span>()  # generate POSCAR_FIX with Cartesian coord<br>    atom_num_str = os.<span class="hljs-built_in">popen</span>(<span class="hljs-string">&#x27;sed -n 7p POSCAR_FIX | tail -n1&#x27;</span>).<span class="hljs-built_in">readline</span>().<span class="hljs-built_in">split</span>()<br>    atom_num = <span class="hljs-built_in">sum</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(int, atom_num_str)))<br>    if num &gt; atom_num:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Relax atom number greater than total atom number! Wrong num input or wrong POSCAR/CONTCAR!&quot;</span>)<br>        sys.<span class="hljs-built_in">exit</span>()<br>    os.<span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;sed -i &#x27;s/T  T  T/F  F  F/g&#x27; POSCAR_FIX&quot;</span>)<br>    lines = os.<span class="hljs-built_in">popen</span>(<span class="hljs-string">&quot;sed -n &#x27;10,$p&#x27; POSCAR_FIX&quot;</span>).<span class="hljs-built_in">readlines</span>()<br>    z_coord = []<br>    for line in lines:<br>        z_coord.<span class="hljs-built_in">append</span>(line.<span class="hljs-built_in">split</span>()[<span class="hljs-number">2</span>])<br>    z = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(float, z_coord))<br>    index_list = <span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(z)), key=lambda k: z[k], reverse=True)<br>    index_to_relax = index_list[:num]<br>    for i in index_to_relax:<br>        z_relax = z_coord[i]<br>        os.<span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;sed -i &#x27;s/&#123;&#125;    F  F  F/&#123;&#125;    T  T  T/g&#x27; POSCAR_FIX&quot;</span>.<span class="hljs-built_in">format</span>(z_relax, z_relax))<br>    os.<span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;cp POSCAR_FIX POSCAR&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Selected top atoms set relaxed.&quot;</span>)<br></code></pre></td></tr></table></figure> 这里先用vaspkit402功能对所有原子固定，然后把<code>POSCAR</code>中所有原子的z轴坐标读出，排序出最顶部原子所在的z轴的坐标，最后把<code>F  F  F</code>替换为<code>T  T  T</code>，实现最顶部<em>n</em>个原子的relax。最关键的代码<strong><code>index_list = sorted(range(len(z)), key=lambda k: z[k], reverse=True)</code></strong>很有意思:rofl:</p><h4 id="step-2">step 2</h4><p>通过sed命令修改<code>INCAR</code>中的参数： <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs scss">def <span class="hljs-built_in">con2pos</span>(name):<br>    os.<span class="hljs-built_in">chdir</span>(name)<br>    os.<span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;sed -i &#x27;s/EDIFF[^G].*/EDIFF = 1E-7/&#x27; INCAR&quot;</span>)<br>    #os.<span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;sed -i &#x27;s/^\s*NPAR/#NPAR/&#x27; INCAR&quot;</span>)<br>    os.<span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;sed -i &#x27;s/IBRION.*/IBRION = 5/&#x27; INCAR&quot;</span>)<br>    os.<span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;sed -i &#x27;s/POTIM.*/POTIM = 0.015/&#x27; INCAR&quot;</span>)<br>    os.<span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;sed -i &#x27;/POTIM/a\   NFREE = 2&#x27; INCAR&quot;</span>)<br>    os.<span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;cp CONTCAR POSCAR&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;CONTCAR in &#123;&#125; copied to POSCAR&quot;</span>.<span class="hljs-built_in">format</span>(name))<br>    os.<span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;rm slurm*&quot;</span>)<br>    <span class="hljs-built_in">relax_top_atoms</span>(relax_atom_num)<br>    os.<span class="hljs-built_in">chdir</span>(cwd)<br></code></pre></td></tr></table></figure><del><strong>这里有一点需要注意的是</strong>：</del><del><code>os.system("sed -i 's/^\s*NPAR/#NPAR/' INCAR")</code>这行代码把<code>NPAR</code>给注释掉了，因为我一般用VASP进行结构优化时<code>ALGO</code>参数一般是<code>Fast</code>，用该算法进行频率计算算了一步之后就会报错，只能注释掉。如果想频率计算的时候也可以设置<code>NPAR</code>提高并行计算效率，可以在结构优化的时候设置<code>ALGO = Normal</code>，这样的话频率计算时就不会报错。</del></p><p><strong><em>Update:</em></strong>最近发现以前做的一些计算，一般都不会设置<code>ISYM</code>，因此使用的是默认设置（<code>ISYM = 2</code>，也就是使用对称性），但是<code>IBRION = 5</code>时会打破对称性，因此设置<code>NPAR</code>后会报错:<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs clean"> -----------------------------------------------------------------------------<br>|                                                                             |<br>|     EEEEEEE  RRRRRR   RRRRRR   OOOOOOO  RRRRRR      ###     ###     ###     |<br>|     E        R     R  R     R  O     O  R     R     ###     ###     ###     |<br>|     E        R     R  R     R  O     O  R     R     ###     ###     ###     |<br>|     EEEEE    RRRRRR   RRRRRR   O     O  RRRRRR       #       #       #      |<br>|     E        R   R    R   R    O     O  R   R                               |<br>|     E        R    R   R    R   O     O  R    R      ###     ###     ###     |<br>|     EEEEEEE  R     R  R     R  OOOOOOO  R     R     ###     ###     ###     |<br>|                                                                             |<br>|      VASP internal routines  have requested a change <span class="hljs-keyword">of</span> the k-point set.    |<br>|      Unfortunately this is only possible <span class="hljs-keyword">if</span> NPAR=number <span class="hljs-keyword">of</span> nodes.           |<br>|      Please remove the tag NPAR <span class="hljs-keyword">from</span> the INCAR file and restart the         |<br>|      calculations.                                                          |<br>|                                                                             |<br>|      ----&gt;  I REFUSE TO CONTINUE WITH THIS SICK JOB ..., BYE!!! &lt;----       |<br>|                                                                             |<br> -----------------------------------------------------------------------------<br></code></pre></td></tr></table></figure> 出于这个目的，代码中会把NPAR一行注释掉,但是这样的话，计算效率会低很多。<strong>现在只要设置<code>ISYM = 0</code>之后，就可以正常设置<code>NPAR</code>了。</strong>参考链接：https://mattermodeling.stackexchange.com/questions/9004/ncore-bigger-than-1-when-performing-phonon-vibrational-calculationibrion-5-in-VASP</p><h4 id="step-3">step 3</h4><p>最后，增加一些让用户可以选择对哪些文件夹进行频率计算的代码和一些错误提示就完事了，完整代码如下：<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs scss">import os<br>import sys<br><br>def <span class="hljs-built_in">make_dir</span>(name):<br>    try:<br>        os.<span class="hljs-built_in">mkdir</span>(name)<br>        return True<br>    except FileExistsError:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125; exists, skipping...&quot;</span>.<span class="hljs-built_in">format</span>(name))<br>        return False<br><br><br>def <span class="hljs-built_in">vasp_folder</span>(name):<br>    os.<span class="hljs-built_in">chdir</span>(name)<br>    count = <span class="hljs-number">0</span><br>    for i in os.<span class="hljs-built_in">listdir</span>():<br>        if i in [<span class="hljs-string">&quot;INCAR&quot;</span>, <span class="hljs-string">&quot;POSCAR&quot;</span>, <span class="hljs-string">&quot;POTCAR&quot;</span>, <span class="hljs-string">&quot;KPOINTS&quot;</span>, <span class="hljs-string">&quot;CONTCAR&quot;</span>, <span class="hljs-string">&quot;OUTCAR&quot;</span>]:<br>            count += <span class="hljs-number">1</span><br>    os.<span class="hljs-built_in">chdir</span>(cwd)<br>    if count &gt;= <span class="hljs-number">5</span>:<br>        return True<br>    else:<br>        <span class="hljs-built_in">print</span>(f<span class="hljs-string">&quot;&#123;name&#125; does not seem to be a finished VASP job folder&quot;</span>)<br><br><br>def <span class="hljs-built_in">con2pos</span>(name):<br>    os.<span class="hljs-built_in">chdir</span>(name)<br>    os.<span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;sed -i &#x27;s/EDIFF[^G].*/EDIFF = 1E-7/&#x27; INCAR&quot;</span>)<br>    # os.<span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;sed -i &#x27;s/^\s*NPAR/#NPAR/&#x27; INCAR&quot;</span>)<br>    os.<span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;sed -i &#x27;s/IBRION.*/IBRION = 5/&#x27; INCAR&quot;</span>)<br>    os.<span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;sed -i &#x27;s/POTIM.*/POTIM = 0.015/&#x27; INCAR&quot;</span>)<br>    os.<span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;sed -i &#x27;/POTIM/a\   NFREE = 2&#x27; INCAR&quot;</span>)<br>    os.<span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;cp CONTCAR POSCAR&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;CONTCAR in &#123;&#125; copied to POSCAR&quot;</span>.<span class="hljs-built_in">format</span>(name))<br>    os.<span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;rm slurm*&quot;</span>)<br>    <span class="hljs-built_in">relax_top_atoms</span>(relax_atom_num)<br>    os.<span class="hljs-built_in">chdir</span>(cwd)<br>    global count<br>    count += <span class="hljs-number">1</span><br><br><br>def <span class="hljs-built_in">relax_top_atoms</span>(num):<br>    os.<span class="hljs-built_in">popen</span>(<br>        <span class="hljs-string">&quot;(echo 402; echo 1; echo 2; echo 0 0; echo 2;)|vaspkit&quot;</span>).<span class="hljs-built_in">readlines</span>()  # generate POSCAR_FIX with Cartesian coord<br>    atom_num_str = os.<span class="hljs-built_in">popen</span>(<span class="hljs-string">&#x27;sed -n 7p POSCAR_FIX | tail -n1&#x27;</span>).<span class="hljs-built_in">readline</span>().<span class="hljs-built_in">split</span>()<br>    atom_num = <span class="hljs-built_in">sum</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(int, atom_num_str)))<br>    if num &gt; atom_num:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Relax atom number greater than total atom number! Wrong num input or wrong POSCAR/CONTCAR!&quot;</span>))<br>        sys.<span class="hljs-built_in">exit</span>()<br>    os.<span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;sed -i &#x27;s/T  T  T/F  F  F/g&#x27; POSCAR_FIX&quot;</span>)<br>    lines = os.<span class="hljs-built_in">popen</span>(<span class="hljs-string">&quot;sed -n &#x27;10,$p&#x27; POSCAR_FIX&quot;</span>).<span class="hljs-built_in">readlines</span>()<br>    z_coord = []<br>    for line in lines:<br>        z_coord.<span class="hljs-built_in">append</span>(line.<span class="hljs-built_in">split</span>()[<span class="hljs-number">2</span>])<br>    z = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(float, z_coord))<br>    index_list = <span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(z)), key=lambda k: z[k], reverse=True)<br>    index_to_relax = index_list[:num]<br>    for i in index_to_relax:<br>        z_relax = z_coord[i]<br>        os.<span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;sed -i &#x27;s/&#123;&#125;    F  F  F/&#123;&#125;    T  T  T/g&#x27; POSCAR_FIX&quot;</span>.<span class="hljs-built_in">format</span>(z_relax, z_relax))<br>    os.<span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;cp POSCAR_FIX POSCAR&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Selected top atoms set relaxed.&quot;</span>)<br><br><br>cwd = os.<span class="hljs-built_in">getcwd</span>()<br>exclude_folder = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Specif exclude folders &amp; files (using space to seperate):&quot;</span>)<br>exclude_folders = exclude_folder.<span class="hljs-built_in">split</span>()<br>run_folder = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Specif folders to run (default all, using space to seperate):&quot;</span>)<br>run_folders = run_folder.<span class="hljs-built_in">split</span>()<br>top_atoms = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;How many atoms to be set to relaxed on top?\n&quot;</span>)<br>try:<br>    relax_atom_num = <span class="hljs-built_in">int</span>(top_atoms)<br>    if relax_atom_num &lt; <span class="hljs-number">0</span>:<br>        raise ValueError<br>except ValueError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Wrong input! Input should be positive integer!&quot;</span>)<br>    sys.<span class="hljs-built_in">exit</span>()<br>if run_folder:<br>    folders = run_folders<br>else:<br>    folders = os.<span class="hljs-built_in">listdir</span>()<br>try:<br>    os.<span class="hljs-built_in">mkdir</span>(<span class="hljs-string">&quot;freq&quot;</span>)<br>except FileExistsError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Attention: folder &lt;freq&gt; exists!&quot;</span>)<br>count = <span class="hljs-number">0</span><br>for folder in folders:<br>    if folder in exclude_folders:<br>        continue<br>    if os.path.<span class="hljs-built_in">isfile</span>(folder):<br>        continue<br>    if not <span class="hljs-built_in">vasp_folder</span>(folder):<br>        continue<br>    if folder.<span class="hljs-built_in">split</span>(<span class="hljs-string">&quot;_&quot;</span>)[-<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;freq&quot;</span>:<br>        continue<br>    freq_name = folder + <span class="hljs-string">&quot;_freq&quot;</span><br>    freq_name = <span class="hljs-string">&quot;freq/&quot;</span> + freq_name<br>    flag = <span class="hljs-built_in">make_dir</span>(freq_name)<br>    if not flag:<br>        continue<br>    os.<span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;cp -r &#123;&#125;/* &#123;&#125;/&quot;</span>.<span class="hljs-built_in">format</span>(folder, freq_name))<br>    #if os.<span class="hljs-built_in">popen</span>(<span class="hljs-string">&quot;grep &#x27;^\s*NPAR&#x27; &#123;&#125;/INCAR&quot;</span>.<span class="hljs-built_in">format</span>(freq_name)).<span class="hljs-built_in">read</span>():<br>        #<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;NPAR tag should be removed for most freq calculations! Will comment out NPAR...&quot;</span>)<br>    <span class="hljs-built_in">con2pos</span>(freq_name)<br><br>if count != <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Remember to check if atoms are fixed properly in POSCAR before freq calculation!&quot;</span>)<br></code></pre></td></tr></table></figure></p><p>自己用了一段时间，基本上没有什么问题，欢迎各位使用测试:satisfied:</p><h2 id="参考资料-references">参考资料 (References)</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>校正分子和吸附分子自由能.Jincheng Liu. http://blog.wangruixing.cn/2019/04/21/freenergy/<a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Computational Chemistry</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VASP</tag>
      
      <tag>DFT</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows计划任务+python实现定时久坐提醒，锁屏强制休息</title>
    <link href="/2022/02/04/force-to-rest/"/>
    <url>/2022/02/04/force-to-rest/</url>
    
    <content type="html"><![CDATA[<h2 id="前言-introduction">前言 (Introduction)</h2><p>作为一个不怎么进实验室做实验的高龄PhDcandidate，常年坐在电脑前<del>摸鱼</del>看文献写文章一搞就是一整天，长此以往颈椎和腰都要报废了，所以每隔一段时间起来活动下是很有必要的。如果有个工具/软件能每隔1个小时提醒下，起来喝口水（避免肾结石），去室外散步(运动量达标+保护视力<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><spanclass="hint--top hint--rounded" aria-label="BJO |近视可能与光照强度相关，户外活动预防近视原因揭示">[1]</span></a></sup><sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="Lingham G, Mackey DA, Lucas R, et al. How does spending time outdoorsprotect against myopia? A review. British Journal of Ophthalmology2020;104:593-599.">[2]</span></a></sup>)，休息10分钟，简直就是一举N得。</p><p>一通搜索后发现并没有现成的能满足需求且足够简洁的第三方软件或者工具(有些能实现这个目的但是会额外带来各种烦人的广告)，最后决定利用Windows自带的计划任务+python脚本来实现。</p><h2 id="方案-solutions">方案 (Solutions)</h2><h3 id="version-1">version-1</h3><p>该思路的基本原理是：通过Windows计划任务，设定每隔1小时启动一个python脚本，该脚本会弹窗<del>且播放闹铃</del>进行久坐提醒(只要你在电脑上认真看文献而不是刷手机就能被提醒到:joy:)，然后开启10分钟倒计时。</p><p>python脚本(<code>countdown.py</code>)比较简单： <figure class="highlight lua"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><pre><code class="hljs lua">import <span class="hljs-built_in">os</span><br>import <span class="hljs-built_in">time</span><br><br>timeleft = <span class="hljs-number">600</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Take a break and have &#123;&#125; s rest!&quot;</span>.<span class="hljs-built_in">format</span>(timeleft))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\r&#123;: &gt;12&#125; s left&quot;</span>.<span class="hljs-built_in">format</span>(timeleft), <span class="hljs-keyword">end</span>=<span class="hljs-string">&quot;&quot;</span>)<br><br><span class="hljs-keyword">while</span> timeleft &gt; <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">time</span>.sleep(<span class="hljs-number">1</span>)<br>    timeleft = timeleft - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> timeleft != <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\r&#123;: &gt;12&#125; s left&quot;</span>.<span class="hljs-built_in">format</span>(timeleft), <span class="hljs-keyword">end</span>=<span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\r&#123;: &gt;12&#125; s left&quot;</span>.<span class="hljs-built_in">format</span>(timeleft), <span class="hljs-keyword">end</span>=<span class="hljs-string">&quot;\n&quot;</span>)<br></code></pre></td></tr></table></figure></p><p>建立计划任务流程如下：</p><ol type="1"><li>Win+R打开“运行”，输入<code>taskschd.msc</code>回车，打开计划任务：</li></ol><p><imgsrc="https://pic.imgdb.cn/item/6206626d2ab3f51d919c9979.jpg" /></p><ol start="2" type="1"><li>创建任务，随意命名(这里命名为<code>rest</code>)：</li></ol><p><imgsrc="https://pic.imgdb.cn/item/6206626d2ab3f51d919c997d.png" /></p><ol start="3" type="1"><li>编辑触发器，选定起始时间(可以略早于设定该计划的时间)和到期时间(到期时间也可以不勾选)：</li></ol><p><imgsrc="https://pic.imgdb.cn/item/6206626d2ab3f51d919c9981.png" /></p><p>此处设定的是每天9点50开始启动该脚本，此后10点50，11点50...均会启动此脚本。</p><ol start="4" type="1"><li>编辑操作，设定脚本的路径：</li></ol><p><imgsrc="https://pic.imgdb.cn/item/6206626d2ab3f51d919c9987.png" /></p><ol start="5" type="1"><li>剩下设置可以保持默认，或者根据自己的需要设置。</li></ol><p>设定完之后可以点击下运行试试效果。<strong>需要注意的是</strong>，在触发器设置的时候设定的是9点50启动，如果你到办公室太晚，10点才开电脑，那么计划任务是不会运行的...所以此处可以按照自己的情况自行设置(督促我们要早点去办公室<del>摸鱼</del>干活)。</p><h3 id="version-2">version-2</h3><p>测试一段时间后，计划任务和脚本运行良好，但是我的颈椎和腰表示并不好:joy:，因为每次弹窗后，要是读文献读到关键部分或者是写文章到关键部分（<del>或者是摸鱼摸到兴头上</del>），我只会顺手把提醒窗口关了，然后无视提醒，最后提醒了个寂寞......</p><p>所以我决定狠一点，时间到了就自动锁屏，每隔10s锁一次，关闭提醒窗口也没用，让自己没法<del>摸鱼</del>干活，真正的<strong>强制休息</strong>，只能被迫起来喝喝水，出去走走。</p><p><code>countdown.py</code>脚本修改如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs lua">import <span class="hljs-built_in">os</span><br>import <span class="hljs-built_in">time</span><br><br>settimeleft = <span class="hljs-number">600</span><br>ttp = <span class="hljs-number">10</span><br><span class="hljs-built_in">os</span>.<span class="hljs-built_in">popen</span>(<span class="hljs-string">&quot;pythonw lockscreen.py &#123;&#125; &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(settimeleft, ttp))<br>timeleft = settimeleft<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Take a break and have &#123;&#125; s rest! Screen will be locked in &#123;&#125; s!&quot;</span>.<span class="hljs-built_in">format</span>(settimeleft, ttp))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\r&#123;: &gt;12&#125; s left&quot;</span>.<span class="hljs-built_in">format</span>(timeleft), <span class="hljs-keyword">end</span>=<span class="hljs-string">&#x27;&#x27;</span>)<br><br><span class="hljs-keyword">while</span> timeleft &gt; <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">time</span>.sleep(<span class="hljs-number">1</span>)<br>    timeleft = timeleft - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> timeleft != <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\r&#123;: &gt;12&#125; s left&quot;</span>.<span class="hljs-built_in">format</span>(timeleft), <span class="hljs-keyword">end</span>=<span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\r&#123;: &gt;12&#125; s left&quot;</span>.<span class="hljs-built_in">format</span>(timeleft), <span class="hljs-keyword">end</span>=<span class="hljs-string">&quot;\n&quot;</span>)<br></code></pre></td></tr></table></figure><p>为了实现锁屏，增加一个<code>lockscreen.py</code>脚本：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs vim">import os<br>import sys<br>import time<br><br><br>def lockscreen():<br>    os.<span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;rundll32.exe user32.dll,LockWorkStation&quot;</span>)<br><br><br><span class="hljs-built_in">count</span> = <span class="hljs-keyword">int</span>(sys.<span class="hljs-built_in">argv</span>[<span class="hljs-number">1</span>])<br>ttp = <span class="hljs-keyword">int</span>(sys.<span class="hljs-built_in">argv</span>[<span class="hljs-number">2</span>])<br>time.<span class="hljs-keyword">sleep</span>(ttp)<br>lockscreen()<br><span class="hljs-built_in">count</span> = <span class="hljs-built_in">count</span> - ttp<br><span class="hljs-keyword">while</span> <span class="hljs-built_in">count</span> &gt; <span class="hljs-number">0</span>:<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">count</span> % <span class="hljs-number">10</span> == <span class="hljs-number">0</span>:<br>        lockscreen()<br>    time.<span class="hljs-keyword">sleep</span>(<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">count</span> -= <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>为了使锁屏脚本能正常工作，<strong>需要修改下计划任务中的操作中的起始路径</strong>(因为<code>countdown.py</code>脚本中调用<code>lockscreen.py</code>脚本时没有设置绝对路径，如果设置了绝对路径也可忽略此步骤)：</p><p><imgsrc="https://pic.imgdb.cn/item/6206626d2ab3f51d919c9991.png" /></p><p><strong>这样的话，每个小时50分的时候，脚本就会弹窗提示休息10分钟，并且在10s后开始锁屏，每隔10s锁一次屏，让你无法工作，只能被迫休息</strong>。</p><p>运行了一段时间发现效果显著，喝水增多+运动达标+视力都更好了呢。</p><p><strong><em>Disclaimer</em></strong>:<strong>切记不要在有用电脑计划的时候开启这个计划任务</strong>(比如用电脑参加会议或者要和老板用电脑讨论文章)，不然锁屏了就很尴尬(补救方法就是拼手速在10s内打开任务管理器杀掉python进程或者重启电脑)。</p><h2 id="参考资料-references">参考资料 (References)</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1"class="footnote-text"><span><a href="https://zhuanlan.zhihu.com/p/349961523">BJO| 近视可能与光照强度相关，户外活动预防近视原因揭示</a><a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>Lingham G, Mackey DA, LucasR, et al. How does spending time outdoors protect against myopia? Areview. British Journal of Ophthalmology 2020;104:593-599.<a href="#fnref:2" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Life tricks</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VASP error - BRMIX very serious problems the old and the new charge density differ 报错解决方案</title>
    <link href="/2022/01/29/VASP-error-BRMIX-very-serious-problems-the-old-and-the-new-charge-density-differ/"/>
    <url>/2022/01/29/VASP-error-BRMIX-very-serious-problems-the-old-and-the-new-charge-density-differ/</url>
    
    <content type="html"><![CDATA[<h2 id="前言-introduction">前言 （Introduction）</h2><p>在用VASP进行结构优化计算时，稍微复杂一点的体系（电子数较多）有时候碰到这个问题：<strong><code>BRMIX: very serious problems the old and the new charge density differ</code></strong>这个报错有时候可以忽略，最终也能完成结构优化，但是出现这个报错后往往电子步难以收敛，会跑满默认的步数（NELM=60），导致耗时显著增加，且跑满默认的电子步数之后仍然不收敛。网上一通搜之后发现大部分的<ahref="https://www.error.wiki/The_old_and_the_new_charge_density_differ">解决方法</a>都没有用，但是最近还是摸索出了几个有效的方法。</p><h2 id="解决方案-solutions">解决方案 （Solutions）</h2><h3id="作业脚本中添加export-i_mpi_adjust_reduce3或者incar中添加lscalapack-tag">1.作业脚本中添加export I_MPI_ADJUST_REDUCE=3或者INCAR中添加LSCALAPACKtag</h3><p>这个方案来源于<ahref="https://www.researchgate.net/post/Anyone_familiar_with_this_error_in_VASP">researchgate的一个回答</a>，在<code>INCAR</code>中添加一行：<br /><strong><code>LSCALAPACK = .FALSE.</code></strong><br />即可，测试之后发现有效。回答中也提到，这是一个和<code>MPI_REDUCE</code>有关的bug，因此也可以在提交任务的脚本中添加：<br /><strong><code>export I_MPI_ADJUST_REDUCE=3</code></strong></p><p><strong><em>update:</em></strong>进一步搜索发现最初的方案应该是来源于林雪平大学(LinköpingUniversity)超算中心。该中心有关于<ahref="https://www.nsc.liu.se/software/installed/tetralith/vasp/">此bug和VASP各版本编译的详细注意事项</a>，推荐阅读。<a href="https://www.nsc.liu.se/software/installed/tetralith/vasp/"><imgsrc="https://pic.imgdb.cn/item/620667552ab3f51d91a196c8.jpg" /></a></p><h3 id="使用10的倍数的核数">2. 使用10的倍数的核数</h3><p>这个方案是无意间发现的：当使用10的整数倍核数进行计算时，这个错误会消失。比如，用28，32或者48个核数时，报该错误，但是调整核数为20，40或者80时，并不会报错。考虑到方案1中提到该错误可能是MPI的bug，所以并行计算时调整核数也能消除该报错也讲得通。</p><p>调整核数这个方案往往不是最优解，因为一般的超算中单个node的核数往往不是10的整数倍，若要调整为10的整数倍需要牺牲一定核数（比如单个node核数为32，调整为30的话，浪费了2个核），计算效率有所降低。</p><h3 id="测试环境">测试环境</h3><p>VASP 5.4.4<br />compiler: intel18u4</p>]]></content>
    
    
    <categories>
      
      <category>Computational Chemistry</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VASP</tag>
      
      <tag>DFT</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
